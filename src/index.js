/**
 * Twine
 * Twine server REST Api definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: gokmen@goksel.me
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Node', 'model/OK', 'model/Registered', 'model/Server', 'api/NodesApi', 'api/ServersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Error'), require('./model/Node'), require('./model/OK'), require('./model/Registered'), require('./model/Server'), require('./api/NodesApi'), require('./api/ServersApi'));
  }
}(function(ApiClient, Error, Node, OK, Registered, Server, NodesApi, ServersApi) {
  'use strict';

  /**
   * Twine_server_REST_Api_definition.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Twine = require('index'); // See note below*.
   * var xxxSvc = new Twine.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Twine.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Twine.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Twine.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Node model constructor.
     * @property {module:model/Node}
     */
    Node: Node,
    /**
     * The OK model constructor.
     * @property {module:model/OK}
     */
    OK: OK,
    /**
     * The Registered model constructor.
     * @property {module:model/Registered}
     */
    Registered: Registered,
    /**
     * The Server model constructor.
     * @property {module:model/Server}
     */
    Server: Server,
    /**
     * The NodesApi service constructor.
     * @property {module:api/NodesApi}
     */
    NodesApi: NodesApi,
    /**
     * The ServersApi service constructor.
     * @property {module:api/ServersApi}
     */
    ServersApi: ServersApi
  };

  return exports;
}));
