/**
 * Twine
 * Twine server REST Api definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: gokmen@goksel.me
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Node', 'model/OK', 'model/Registered'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Node'), require('../model/OK'), require('../model/Registered'));
  } else {
    // Browser globals (root is window)
    if (!root.Twine) {
      root.Twine = {};
    }
    root.Twine.NodesApi = factory(root.Twine.ApiClient, root.Twine.Error, root.Twine.Node, root.Twine.OK, root.Twine.Registered);
  }
}(this, function(ApiClient, Error, Node, OK, Registered) {
  'use strict';

  /**
   * Nodes service.
   * @module api/NodesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NodesApi. 
   * @alias module:api/NodesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteNode operation.
     * @callback module:api/NodesApi~deleteNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete node by ID
     * Deletes a node with given ID
     * @param {String} nodeId ID of node to delete
     * @param {module:api/NodesApi~deleteNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OK}
     */
    this.deleteNode = function(nodeId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling deleteNode");
      }


      var pathParams = {
        'nodeId': nodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OK;

      return this.apiClient.callApi(
        '/nodes/{nodeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNode operation.
     * @callback module:api/NodesApi~getNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find node by ID
     * Returns a single node with details
     * @param {String} nodeId ID of node to return
     * @param {module:api/NodesApi~getNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    this.getNode = function(nodeId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling getNode");
      }


      var pathParams = {
        'nodeId': nodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Node;

      return this.apiClient.callApi(
        '/nodes/{nodeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodes operation.
     * @callback module:api/NodesApi~getNodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of registered nodes
     * Returns list of registered nodes by their IDs
     * @param {module:api/NodesApi~getNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getNodes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerNode operation.
     * @callback module:api/NodesApi~registerNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registered} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new node
     * 
     * @param {module:model/Node} body Node object to register Twine
     * @param {module:api/NodesApi~registerNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registered}
     */
    this.registerNode = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerNode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registered;

      return this.apiClient.callApi(
        '/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNode operation.
     * @callback module:api/NodesApi~updateNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch node by ID
     * Updates a node with given ID and data
     * @param {String} nodeId ID of node to update
     * @param {module:model/Node} body Node details to update
     * @param {module:api/NodesApi~updateNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OK}
     */
    this.updateNode = function(nodeId, body, callback) {
      var postBody = body;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling updateNode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNode");
      }


      var pathParams = {
        'nodeId': nodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OK;

      return this.apiClient.callApi(
        '/nodes/{nodeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
